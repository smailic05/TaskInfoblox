// Code generated by mockery (devel). DO NOT EDIT.

package mock

import (
	context "context"

	pb "github.com/smailic05/TaskInfoblox/internal/pb"
	mock "github.com/stretchr/testify/mock"
)

// UserServiceServer is an autogenerated mock type for the UserServiceServer type
type UserServiceServer struct {
	mock.Mock
}

// AddUser provides a mock function with given fields: _a0, _a1
func (_m *UserServiceServer) AddUser(_a0 context.Context, _a1 *pb.AddUserRequest) (*pb.AddUserResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.AddUserResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.AddUserRequest) *pb.AddUserResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.AddUserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.AddUserRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: _a0, _a1
func (_m *UserServiceServer) DeleteUser(_a0 context.Context, _a1 *pb.DeleteUserRequest) (*pb.DeleteUserResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.DeleteUserResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.DeleteUserRequest) *pb.DeleteUserResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.DeleteUserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.DeleteUserRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUser provides a mock function with given fields: _a0, _a1
func (_m *UserServiceServer) FindUser(_a0 *pb.FindUserRequest, _a1 pb.UserService_FindUserServer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*pb.FindUserRequest, pb.UserService_FindUserServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListUser provides a mock function with given fields: _a0, _a1
func (_m *UserServiceServer) ListUser(_a0 *pb.ListUserRequest, _a1 pb.UserService_ListUserServer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*pb.ListUserRequest, pb.UserService_ListUserServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: _a0, _a1
func (_m *UserServiceServer) UpdateUser(_a0 context.Context, _a1 *pb.UpdateUserRequest) (*pb.UpdateUserResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.UpdateUserResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.UpdateUserRequest) *pb.UpdateUserResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.UpdateUserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.UpdateUserRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedUserServiceServer provides a mock function with given fields:
func (_m *UserServiceServer) mustEmbedUnimplementedUserServiceServer() {
	_m.Called()
}
