// Code generated by mockery (devel). DO NOT EDIT.

package mock

import (
	model "github.com/smailic05/TaskInfoblox/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// DeleteUser provides a mock function with given fields: user
func (_m *Repository) DeleteUser(user model.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Load provides a mock function with given fields: user
func (_m *Repository) Load(user model.User) ([]model.User, error) {
	ret := _m.Called(user)

	var r0 []model.User
	if rf, ok := ret.Get(0).(func(model.User) []model.User); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadOne provides a mock function with given fields: user
func (_m *Repository) LoadOne(user model.User) (model.User, error) {
	ret := _m.Called(user)

	var r0 model.User
	if rf, ok := ret.Get(0).(func(model.User) model.User); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: user
func (_m *Repository) Store(user model.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: user
func (_m *Repository) Update(user model.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
